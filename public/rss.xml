<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Lukas Spiss</title>
    <link>https:&#x2F;&#x2F;www.spiss.dev</link>
    <description>Posts by Lukas Spiss</description>
    <generator>Zola</generator>
    <managingEditor>lukas@spiss.dev (Lukas Spiss)</managingEditor>
    <webMaster>lukas@spiss.dev (Lukas Spiss)</webMaster>
    <atom:link href="https:&#x2F;&#x2F;www.spiss.dev&#x2F;rss.xml" rel="self" type="application/rss+xml"/>
    <lastBuildDate>Tue, 03 May 2022 00:00:00 +0000</lastBuildDate>
    
    <item>
      <title>Jest Memory Leaks - Some Lessons Learnt</title>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <atom:published>2022-05-03T00:00:00+00:00</atom:published>
      
      <author>lukas@spiss.dev (Lukas Spiss)</author>
      <link>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2022&#x2F;jestmemoryleak&#x2F;</link>
      <guid>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2022&#x2F;jestmemoryleak&#x2F;</guid>
      <description>&lt;p&gt;Recently I was facing some memory leaks in the test suits of one of my projects. As I spent a couple of days analyzing the issue and finally fixing it, I wanted to summarize the lessons learnt.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;project-infos&quot;&gt;Project Infos&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Nest.JS v8&lt;&#x2F;li&gt;
&lt;li&gt;Node.JS v14&lt;&#x2F;li&gt;
&lt;li&gt;~800 unit tests using Jest&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-build-up&quot;&gt;The Build Up&lt;&#x2F;h3&gt;
&lt;p&gt;Every once in a while, the Github Actions pipeline would run out of memory during a test run. This is what it looked like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;--- JS stacktrace ---&amp;gt;

FATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While it didn&#x27;t happen consistently, it was still becoming annoying enough. To make matters worse, a Node.JS update to v16 seemed to make the problem unbearable. Time to investigate üïµüèΩ‚Äç‚ôÇÔ∏è.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;node-v16&quot;&gt;Node v16&lt;&#x2F;h3&gt;
&lt;p&gt;There seems to be a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;jest&#x2F;issues&#x2F;11956&quot;&gt;bug&lt;&#x2F;a&gt;, introduced with Node v16.11, causing memory leaks with Jest. While this bug is certainly putting my Node 16 update to a halt until it&#x27;s resolved, the mentioned Github issue also gives quite some insight on how to debug these kinds of issues. Back to Node 14 üîô.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;early-suspicions&quot;&gt;Early Suspicions&lt;&#x2F;h3&gt;
&lt;p&gt;Some early ideas what could be causing the issues were:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A bad jest&#x2F;ts-jest&#x2F;... package update&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;jest-ts-auto-mock&quot;&gt;Jest-ts-auto-mock&lt;&#x2F;a&gt; as this is messing with the transformer&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;setupFilesBeforeEnv&lt;&#x2F;code&gt; which I had added recently&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In order to verify any assumptions and changes made, the following command was used to see if any memory was leaking:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;node --expose-gc .&#x2F;node_modules&#x2F;.bin&#x2F;jest --runInBand --logHeapUsage&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;going-back-in-time&quot;&gt;Going Back in Time&lt;&#x2F;h3&gt;
&lt;p&gt;In order to see if the problem has been happening for a while, just at a smaller scale, I went back to a commit some months ago and ran the above command. Turns out, back then everything was looking fine!&lt;&#x2F;p&gt;
&lt;p&gt;With that knowledge, I proceded to test whether package updates are responsible for what&#x27;s happening, but no luck there.&lt;&#x2F;p&gt;
&lt;p&gt;I figured I should try and pin-point to the exact commit where the problem started, but with the normal memory fluctuation it was impossible to spot. To make matters even worse, there seems to be yet a different &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;jest&#x2F;issues&#x2F;12142&quot;&gt;memory issue&lt;&#x2F;a&gt; when using the &lt;code&gt;--runInBand&lt;&#x2F;code&gt; flag.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;detectleaks-flag-to-the-rescue&quot;&gt;detectLeaks Flag to the Rescue&lt;&#x2F;h3&gt;
&lt;p&gt;Thankfully there is yet another flag called &lt;code&gt;--detectLeaks&lt;&#x2F;code&gt; which will force the garbage collection and fail the test suite if it detects any memory leak.&lt;&#x2F;p&gt;
&lt;p&gt;The updated command: &lt;code&gt;node --expose-gc .&#x2F;node_modules&#x2F;.bin&#x2F;jest --detectLeaks&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Going back to the same &amp;quot;suspected-memory-leak-free-commit&amp;quot;, this command proved exactly that. Jumping around commits &amp;quot;bisection&amp;quot; style, while running the leak detection every time, very quickly gave me the exact commit which turned every test suite red.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setupfilesafterenv-nock&quot;&gt;setupFilesAfterEnv + nock&lt;&#x2F;h3&gt;
&lt;p&gt;Turns out, the issue was the following jest setup file which I introduced to globally disable any external http requests in tests:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; jest.setup.ts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;disableNetConnect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;enableNetConnect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a section in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nock&#x2F;nock#memory-issues-with-jest&quot;&gt;nock README&lt;&#x2F;a&gt; which actually describes that exact issue. There is also some more context linked there.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-lessons-learnt&quot;&gt;Key lessons learnt&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;RTFM&lt;&#x2F;li&gt;
&lt;li&gt;Run tests with &lt;code&gt;--detectLeaks&lt;&#x2F;code&gt; flag, perhaps even in the CI to detect issues right away, instead of facing 5 different issues at the same time once it all bubbles up.&lt;&#x2F;li&gt;
&lt;li&gt;Try out newer transformers such as swc&#x2F;jest or esbuild&#x2F;jest for new projects.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
    </item>
    
    <item>
      <title>Code-Server - Taking the home office to the outside</title>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      <atom:published>2021-08-20T00:00:00+00:00</atom:published>
      
      <author>lukas@spiss.dev (Lukas Spiss)</author>
      <link>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2021&#x2F;codeserver&#x2F;</link>
      <guid>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2021&#x2F;codeserver&#x2F;</guid>
      <description>&lt;p&gt;While working from home is nice and all, I wanted to level up my home office experience to allow me to work from basically anywhere, without having too many compromises. And because using my Dell XPS 13 would have been too easy of a choice, I challenged myself to use an iPad instead.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h3&gt;
&lt;p&gt;While iPads got the shiny new M1 processor and therefore loads of processing power, the coding experience is still pretty much nonexistent, due to the software limitations of iPadOS.
And that&#x27;s where &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cdr&#x2F;code-server&quot;&gt;code-server&lt;&#x2F;a&gt; comes into play:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Run VS Code on any machine anywhere and access it in the browser.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Sounds perfect for my use case! &lt;&#x2F;p&gt;
&lt;p&gt;Below are some of the key steps I had to take to make it all work. However, this is not a detailed step by step guide.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setting-up-code-server&quot;&gt;Setting up Code-Server&lt;&#x2F;h3&gt;
&lt;p&gt;Code-server is available via the AUR for Arch Linux users at &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;code-server&#x2F;&quot;&gt;AUR link&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once installed, the actual set-up is pretty easy.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ cat ~&#x2F;.config&#x2F;code-server&#x2F;config.yaml

bind-addr: 0.0.0.0:1897
auth: password
password: XXXXXXXXXX
cert: false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ sudo systemctl edit --full code-server@USER

...
ExecStart=&#x2F;usr&#x2F;bin&#x2F;code-server --proxy-domain *.XXXXXXXXXX.spiss.dev
...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;setting-up-caddy&quot;&gt;Setting up Caddy&lt;&#x2F;h3&gt;
&lt;p&gt;As the code-server docs suggest it, I decided to go for Caddy as my reverse proxy. This made the next part of the set-up pretty easy as well.
The only sort of annoying part was that I couldn&#x27;t use the caddy package from the Arch repo, but I had to compile it from source together with the Route 53 plugin, which I use to manage my domain. See the GitHub Repo for more details: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;caddy-dns&#x2F;route53&quot;&gt;GitHub link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once installed, I added this config file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ cat &#x2F;etc&#x2F;caddy&#x2F;Caddyfile

XXXXXXXXXX.spiss.dev *.XXXXXXXXXX.spiss.dev {
  tls {
    dns route53 {
      max_retries 10
    }
  }

  reverse_proxy 127.0.0.1:1897
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order for Caddy to obtain a &lt;strong&gt;wildcard&lt;&#x2F;strong&gt; SSL certificate, I had to add a user which is allowed to manage my Route 53. See the GitHub repo for more details: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libdns&#x2F;route53&quot;&gt;GitHub link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ sudo systemctl edit --full caddy.service

...
[Service]
Environment=AWS_ACCESS_KEY_ID=XXXXXXXXXX
Environment=AWS_SECRET_ACCESS_KEY=XXXXXXXXXX
...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;setting-up-the-router&quot;&gt;Setting up the Router&lt;&#x2F;h3&gt;
&lt;p&gt;Almost done, phew. After starting all the necessary systemd services, this should be the first time a beautiful VS Code window is accessible on the iPad, but only on the same network.
Because I actually want to go outside my WI-FI range, I still had to open the 443 port on my router. Kinda scary, but code-server got us covered by blocking too many wrong password attempts. Since this is very router dependent, I&#x27;ll let you figure that one out. It&#x27;s probably a good time to configure a firewall on your PC as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dyndns&quot;&gt;DynDNS&lt;&#x2F;h3&gt;
&lt;p&gt;Everything is working by now, and if you have a static IP, you&#x27;re done. Since my ISP doesn&#x27;t give me one, I still had to configure some kind of DynDNS service to keep my IP address up-to-date in Route 53.
To achieve this, I configured yet another systemd service: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;famzah&#x2F;aws-dyndns&quot;&gt;GitHub link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;et-voila&quot;&gt;Et Voil√†&lt;&#x2F;h3&gt;
&lt;p&gt;Using the power of my desktop PC right from the browser, including forwarding of locally hosted web services. In fact, I wrote this whole blog post on my iPad via code-server on my PC. The locally running &lt;code&gt;0.0.0.0:1111&lt;&#x2F;code&gt; Zola site was automatically served via &lt;code&gt;1111.XXXXXXXXXX.spiss.dev&lt;&#x2F;code&gt; behind the same password protection.
And nowadays, I even find myself connecting to the code-server from my Dell XPS 13, as the Desktop PC is just way more powerful, especially when compiling large Rust projects ;)&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;www.spiss.dev&amp;#x2F;processed_images&amp;#x2F;a4e19b00ec4d54c200.png&quot; alt=&quot;VS Code on iPad&quot; &#x2F;&gt;
</description>
    </item>
    
    <item>
      <title>Arch Linux - it&#x27;s really not that complicated</title>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      <atom:published>2020-07-23T00:00:00+00:00</atom:published>
      
      <author>lukas@spiss.dev (Lukas Spiss)</author>
      <link>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2020&#x2F;archlinux&#x2F;</link>
      <guid>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2020&#x2F;archlinux&#x2F;</guid>
      <description>&lt;p&gt;This is a step by step installation documentation on how I install Arch Linux on my Dell XPS 13 (9370) - my primary work setup. This is quite opinionated (e.g. f2fs root partition) and not applicable on every machine out there. But perhaps a rough guideline on how to easily install Arch Linux nonetheless.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;2 partitions: boot (fat32), root (f2fs - encrypted)&lt;&#x2F;li&gt;
&lt;li&gt;Bootloader: Systemd-boot (formerly gummiboot)&lt;&#x2F;li&gt;
&lt;li&gt;Desktop Environment: Gnome&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Please also consult the official &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Installation_Guide&quot;&gt;Arch Linux Documentation&lt;&#x2F;a&gt;.&lt;br &#x2F;&gt;
The step by step instructions can also be found on my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Spissable&#x2F;arch-linux-installation&quot;&gt;Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enter-bios-with-f2-and-configure&quot;&gt;Enter BIOS with F2 and configure:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;System Configuration&amp;quot; &amp;gt; &amp;quot;SATA Operation&amp;quot;: &amp;quot;AHCI&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;Secure Boot&amp;quot; &amp;gt; &amp;quot;Secure Boot Enable&amp;quot;: &amp;quot;Disabled&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;boot-from-usb&quot;&gt;Boot from USB&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Make sure to boot from USB using UEFI - this is required by systemd-boot!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;set-desired-keymap&quot;&gt;Set desired keymap&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;loadkeys en_US-utf8&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optional-connect-to-wifi&quot;&gt;(Optional) Connect to wifi&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;wifi-menu&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once done it can take some seconds - confirm it worked using ping&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ping 1.1.1.1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sync-clock&quot;&gt;Sync clock&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;timedatectl set-ntp true&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-two-partitions&quot;&gt;Create two partitions:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;1000MB EFI partition with hex code &lt;strong&gt;ef00&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;100% Linux partiton (to be encrypted) with hex code &lt;strong&gt;8300&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;&#x2F;strong&gt; Find the correct disk&#x2F;partition names for yourself using &lt;code&gt;lsblk&lt;&#x2F;code&gt;. From here on I am using mine as an example. Do not blindly copy paste these, it might not work or you might destroy partitions you don&#x27;t want to destroy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cgdisk &#x2F;dev&#x2F;nvme0n1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optional-install-f2fs-tools&quot;&gt;(Optional) Install f2fs-tools&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;pacman -S f2fs-tools&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;formatting-and-encyption&quot;&gt;Formatting and encyption&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Boot&lt;&#x2F;strong&gt; partition&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;mkfs.fat -F32 &#x2F;dev&#x2F;nvme0n1p1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Root&lt;&#x2F;strong&gt; partition&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cryptsetup luksFormat --type=luks2 &#x2F;dev&#x2F;nvme0n1p2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cryptsetup open &#x2F;dev&#x2F;nvme0n1p2 luks&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;(choose filesystem - assuming f2fs)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;mkfs.f2fs -l luks &#x2F;dev&#x2F;mapper&#x2F;luks&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mount-root-and-boot-partition&quot;&gt;Mount root and boot partition&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;mount &#x2F;dev&#x2F;mapper&#x2F;luks &#x2F;mnt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;mkdir -p &#x2F;mnt&#x2F;boot&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;mount &#x2F;dev&#x2F;nvme0n1p1 &#x2F;mnt&#x2F;boot&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;change-pacman-mirror-priority-move-closer-mirror-to-the-top&quot;&gt;Change pacman mirror priority, move closer mirror to the top&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;vim &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;install-the-base-system-plus-a-few-extra-packages&quot;&gt;Install the base system plus a few extra packages&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;f2fs-tools is needed if you chose f2fs as your partition&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;With some recent XPS Laptops linux-zen seems to be working better, e.g. resolves screen flickering issues&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pacstrap &#x2F;mnt base linux linux-firmware zsh vim git sudo efibootmgr wpa_supplicant
dialog iw f2fs-tools
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;generate-fstab&quot;&gt;Generate fstab&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;genfstab -L &#x2F;mnt &amp;gt;&amp;gt; &#x2F;mnt&#x2F;etc&#x2F;fstab&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enter-the-new-system&quot;&gt;Enter the new system&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;arch-chroot &#x2F;mnt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setup-time&quot;&gt;Setup time&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;rm &#x2F;etc&#x2F;localtime&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ln -s &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Europe&#x2F;Berlin &#x2F;etc&#x2F;localtime&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;hwclock --systohc&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;generate-required-locales&quot;&gt;Generate required locales&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;vim &#x2F;etc&#x2F;locale.gen&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;locale-gen&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;set-desired-locale&quot;&gt;Set desired locale&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;echo &#x27;LANG=en_US.UTF-8&#x27; &amp;gt; &#x2F;etc&#x2F;locale.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;set-desired-keymap-and-font&quot;&gt;Set desired keymap and font&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;echo &#x27;KEYMAP=us&#x27; &amp;gt; &#x2F;etc&#x2F;vconsole.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;set-the-hostname&quot;&gt;Set the hostname&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;echo &#x27;&amp;lt;hostname&amp;gt;&#x27; &amp;gt; &#x2F;etc&#x2F;hostname&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;add-hostname-to-etc-hosts&quot;&gt;Add hostname to &#x2F;etc&#x2F;hosts:&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;vim &#x2F;etc&#x2F;hosts&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;127.0.0.1	localhost
::1		localhost
127.0.1.1	&amp;lt;hostname&amp;gt;.localdomain &amp;lt;hostname&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;set-password-for-root&quot;&gt;Set password for root&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;passwd&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;add-real-user&quot;&gt;Add real user&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;useradd -m -g users -G wheel -s &#x2F;bin&#x2F;zsh &amp;lt;username&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;passwd &amp;lt;username&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;echo &#x27;&amp;lt;username&amp;gt; ALL=(ALL) ALL&#x27; &amp;gt; &#x2F;etc&#x2F;sudoers.d&#x2F;&amp;lt;username&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configure-mkinitcpio-with-modules-needed-for-the-initrd-image&quot;&gt;Configure mkinitcpio with modules needed for the initrd image&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;vim &#x2F;etc&#x2F;mkinitcpio.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;# Optional - for f2fs module crypto-crc32 is required however
MODULES=(crypto-crc32)

# Important - Use the correct order
HOOKS=(base systemd autodetect modconf block keyboard sd-vconsole sd-encrypt filesystems)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;regenerate-initrd-image&quot;&gt;Regenerate initrd image&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;mkinitcpio -P&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setup-systemd-boot&quot;&gt;Setup systemd-boot&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;bootctl --path=&#x2F;boot install&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enable-intel-microcode-updates&quot;&gt;Enable Intel microcode updates&lt;&#x2F;h3&gt;
&lt;p&gt;(For AMD replace &lt;strong&gt;intel-ucode&lt;&#x2F;strong&gt; with &lt;strong&gt;amd-ucode&lt;&#x2F;strong&gt; in every step that follows)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;pacman -S intel-ucode&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-bootloader-entry&quot;&gt;Create bootloader entry&lt;&#x2F;h3&gt;
&lt;p&gt;Get luks-uuid with: &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cryptsetup luksUUID &#x2F;dev&#x2F;nvme0n1p2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Create the entry:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;vim &#x2F;boot&#x2F;loader&#x2F;entries&#x2F;arch.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;title		Arch Linux
linux		&#x2F;vmlinuz-linux
initrd		&#x2F;intel-ucode.img
initrd		&#x2F;initramfs-linux.img
options		rw luks.uuid=&amp;lt;uuid&amp;gt; luks.name=&amp;lt;uuid&amp;gt;=luks root=&#x2F;dev&#x2F;mapper&#x2F;luks
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;set-default-bootloader-entry&quot;&gt;Set default bootloader entry&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;vim &#x2F;boot&#x2F;loader&#x2F;loader.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;default		arch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;optional-setup-gnome&quot;&gt;(Optional) - Setup Gnome&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;pacman -S gnome&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;systemctl enable gdm&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exit-unmount-and-reboot&quot;&gt;Exit, unmount and reboot&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;exit&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;umount -R &#x2F;mnt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;reboot&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</description>
    </item>
    
    <item>
      <title>Giving Clear Linux a Try</title>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      <atom:published>2020-03-01T00:00:00+00:00</atom:published>
      
      <author>lukas@spiss.dev (Lukas Spiss)</author>
      <link>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2020&#x2F;clearlinux&#x2F;</link>
      <guid>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2020&#x2F;clearlinux&#x2F;</guid>
      <description>&lt;p&gt;After over a year of exclusively using Arch Linux on my work laptop, the distro hopping itch has gotten the better of me and I decided to give &lt;a href=&quot;https:&#x2F;&#x2F;clearlinux.org&#x2F;&quot;&gt;Clear Linux&lt;&#x2F;a&gt; a try. And since I don&#x27;t do half arsed things, I wiped my disk and used Clear Linux as my main distro... at least for a while.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h3&gt;
&lt;p&gt;The installation experience was very straight forward, similar to the one of Ubuntu I&#x27;d say. The graphical interface leaves next to no room for mistakes and presents you with a ready-to-go system with just a few clicks.&lt;&#x2F;p&gt;
&lt;p&gt;The only thing I was missing was F2FS (Flash-Friendly File System) support, which is my preferred filesystem. However, at the time of me writing this post, a pull request adding support for it has been &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clearlinux&#x2F;clr-installer&#x2F;pull&#x2F;654#event-3079095310&quot;&gt;merged&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-good&quot;&gt;The Good&lt;&#x2F;h3&gt;
&lt;p&gt;The very first thing I noticed when booting Clear Linux, was actually the boot process itself. It is &lt;em&gt;blazing fast&lt;&#x2F;em&gt;! Despite full root encryption. I also found confirmation of that impression &lt;a href=&quot;https:&#x2F;&#x2F;phoronix.com&#x2F;scan.php?page=news_item&amp;amp;px=Clear-Linux-Kernel-3s-to-300ms&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Since the default desktop environment of the distro is Gnome, I was then greeted by the Gnome Desktop Manager. A choice I very much support, as Gnome gives a very complete desktop experience in my opinion, including support for X11 and Wayland.&lt;&#x2F;p&gt;
&lt;p&gt;Last but not least, all the software I installed was up-to-date, which is one of the big promises on the distros website.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-bad&quot;&gt;The Bad&lt;&#x2F;h3&gt;
&lt;p&gt;While the software I installed was up-to-date, it still cost me quite some frustration. Clear Linux offers a lot of its packages in bundles, e.g. the desktop-dev bundle, which includes lots of different packages which you might need or might not. As for me, I prefer being in control of what is being installed, rather than having to get a whole bundle of things of which half of it is useless to me.&lt;&#x2F;p&gt;
&lt;p&gt;Another packaging format that is supported is &lt;a href=&quot;https:&#x2F;&#x2F;flatpak.org&#x2F;&quot;&gt;Flatpak&lt;&#x2F;a&gt;. A containerized, distribution independent packaging format which claims to be &amp;quot;The Future Of Apps On Linux.&amp;quot; As they offer Visual Studio Code, which is my main code editor, I gave it a try. First problem, the integrated terminal was not working as I was used to. The Z shell didn&#x27;t respect my config files, certain executables weren&#x27;t usable... and I am &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;vscode&#x2F;issues&#x2F;44646&quot;&gt;not the only one&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Last but not least, only 1 week into the experiment, my Gnome Wayland setup didn&#x27;t load anymore, but instead I was greeted with a black screen on log-in. The X11 variant still worked though, so I tried to repair it from there. However, attempt after attempt the frustration grew bigger and bigger and I really need my system to be reliable at work, so I just decided to pull the plug and re-install the trusted Arch Linux.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;I am still glad I gave Clear Linux a try and despite the problems that I faced, I am still very impressed how far this very young distro has come. Especially the performance is astonishing, and I hope other distros can integrate some of Clear Linux&#x27;s patches. I can&#x27;t wait to try out the next up and coming distro, whichever it might be.&lt;&#x2F;p&gt;
</description>
    </item>
    
    <item>
      <title>i3wm - the world of tiling window managers</title>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      <atom:published>2019-05-25T00:00:00+00:00</atom:published>
      
      <author>lukas@spiss.dev (Lukas Spiss)</author>
      <link>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2019&#x2F;i3wm&#x2F;</link>
      <guid>https:&#x2F;&#x2F;www.spiss.dev&#x2F;posts&#x2F;2019&#x2F;i3wm&#x2F;</guid>
      <description>&lt;p&gt;Disclaimer: If you prefer your system to be production ready right away, shiny to the very last pixel and intuitive without spending some time to get used to it, then i3 is most likely not for you. For anyone else, enjoy the post and I hope you&#x27;ll give it a try yourself! &lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;floating-vs-tiling&quot;&gt;Floating vs. Tiling&lt;&#x2F;h3&gt;
&lt;p&gt;The window manager landscape for the Linux ecosystem is quite crowded. Major names like Gnome, KDE or XFCE satisfy most users&#x27; needs and give a lot of room for customization. One feature that unites them is, that they are all floating window managers. It&#x27;s the concept of dragging windows around freely (mostly with your mouse), probably everyone is familiar with from using Windows or MacOS. &lt;&#x2F;p&gt;
&lt;p&gt;On the other side, there are tiling window managers like i3, awesome or herbstluft, just to name a few. They are way less popular amongst the average user, but the concept of automatically tiling windows by default, not just helps you to stay organized, but enforces it. And once you get accustomed to it, you&#x27;ll find your workflow to be vastly improved in speed. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;i3wm&quot;&gt;i3wm&lt;&#x2F;h3&gt;
&lt;p&gt;i3wm is my window manager of choice for some years now whenever I&#x27;m working on a Linux machine. Initially I encountered it during a presentation at the university. I had been using Linux for years at that point, but I wasn&#x27;t familiar with the concept of tiling window managers. Clearly impressed, I installed it right away and well... it was a game changer. A few of the main features (for me):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tiling (duh.)&lt;&#x2F;li&gt;
&lt;li&gt;Binding applications to workspaces&lt;&#x2F;li&gt;
&lt;li&gt;Horizontal &#x2F; Vertical &#x2F; Tabbed &#x2F; Stacked &#x2F; Floating&lt;&#x2F;li&gt;
&lt;li&gt;Configuration in a single config file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;binding-applications-to-workspaces&quot;&gt;Binding applications to workspaces&lt;&#x2F;h3&gt;
&lt;p&gt;In order to stay truly organized in a tiling window manager environment, it&#x27;s quite fundamental that your windows open in pre-defined workspaces. Otherwise your screen would become really crowded, really fast. This is how I organize my workspaces:&lt;&#x2F;p&gt;
&lt;p&gt;1: Browsers&lt;&#x2F;p&gt;
&lt;p&gt;2: Editors&lt;&#x2F;p&gt;
&lt;p&gt;3: Terminals&lt;&#x2F;p&gt;
&lt;p&gt;4: Communication&lt;&#x2F;p&gt;
&lt;p&gt;5: Music&lt;&#x2F;p&gt;
&lt;p&gt;Scratchpad: Notes&lt;&#x2F;p&gt;
&lt;p&gt;With this setup, I got my everyday needs covered. It became second nature to me and going back to any other window manager without this feature (which I occasionally do, because I love to experiment) is just a pain in the ass.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;All keybinds, workspaces etc. are configured in one config file (~&#x2F;.config&#x2F;i3&#x2F;config). While this might be a little bit intimidating at first, it becomes more and more advantageous with time. i3 has a great documentation for beginners, making it actually quite easy to tailor the window manger the way you like it. And once configured, you can just backup your configuration file and have it ready whenever you decide to install a new OS.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;additional-tools&quot;&gt;Additional tools&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Polybar:&lt;&#x2F;strong&gt; Alternative, feature rich and beautiful statusbar&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Rofi:&lt;&#x2F;strong&gt; Application launcher, window switcher and much more&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Udev rule + systemd service + bash script:&lt;&#x2F;strong&gt; to properly manage monitor hotplug&lt;&#x2F;p&gt;
&lt;h3 id=&quot;helpful-ressources&quot;&gt;Helpful ressources&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;i3wm.org&#x2F;docs&#x2F;&quot;&gt;i3 documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;swaywm.org&#x2F;&quot;&gt;Sway (wayland implementation of i3)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;unixporn&#x2F;&quot;&gt;Subreddit for inspiration&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Spissable&#x2F;dotfiles&#x2F;&quot;&gt;My dotfiles&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
    </item>
    
  </channel>
</rss>
